// ************************************************************
// [1] 헤더
#include <stdio.h>  // [1-1]
#include <stdlib.h> // [1-2] 화면클리어하기 위한 라이브러리
#include <conio.h>  // [1-3] 콘솔입력 헤더
// ************************************************************
// [2] 정수
#define BOARD_WIDTH		(8)
#define BOARD_HEIGHT	(8)
// ************************************************************
// [3] 열거형
// [3-1] 턴의 종류
enum
{
	TURN_BLACK, // 흑
	TURN_WHITE, // 백
	TURN_NONE,  // 돌없음
	TURN_MAX    // 턴의 수
};
// ************************************************************
// [4] 구조체
// [4-1] 벡터 구조체
typedef struct {
	int x, y; // [4-1-1] 좌표
} VEC2;
// ************************************************************
// [5] 변수
// [5-1]石のアスキーアー
const char* diskAA[TURN_MAX] =
{
	"●",    // [5-1-1]TURN_BLACK    黒い石が置かれている
	"○",    // [5-1-2]TURN_WHITE    白い石が置かれている
	"×"     // [5-1-3]TURN_NONE     石が置かれていない
};

// [5-5] 각 칸의 상태를 선언
int board[BOARD_HEIGHT][BOARD_WIDTH];
// [5-6] 커서의 좌표 선언
VEC2 cursorPosition;
// ************************************************************
// [6] 함수
// ------------------------------
// [6-5] 화면 그리는 함수
void drawScreen()
{
	// [6-5-1] 화면 클리어
	system("cls");
	// [6-5-2]
	for (int y = 0; y < BOARD_HEIGHT; y++)
	{
		// [6-5-3]
		for (int x = 0; x < BOARD_WIDTH; x++)
			printf("%s", diskAA[board[y][x]] ); // [6-5-4]
		// [6-5-6] 대상의 행이 커서와 같은 행인지 판정
		if (y == cursorPosition.y)
		{
			printf("←"); // [6-5-7]
		}
		printf("\n"); // [6-5-8] 개행
	}
	// [6-5-10] 판의 열 반복
	for (int x = 0; x < BOARD_WIDTH; x++)
	{
		// [6-5-11] 커서가 같은 열인지 판정
		if (x == cursorPosition.x)
		{
			printf("↑"); // [6-5-12]
		}
		else {
			printf("  "); // [6-5-13]
		}
	}
	// [6-5-14] 개행
	printf("\n");
}
// ------------------------------
// [6-7] 초기화 함수
void init()
{
	// [6-7-1] 초기화
	for (int y = 0; y < BOARD_HEIGHT; y++)
	{
		// [6-7-2]
		for (int x = 0; x < BOARD_WIDTH; x++)
		{
			board[y][x] = TURN_NONE; // [6-7-3]
		}
	}
	// [6-7-4] 판 중앙의 우상, 좌하에 흑돌을 둔다
	board[4][3] = board[3][4] = TURN_BLACK;
	// [6-7-5] 흰돌
	board[4][4] = board[3][3] = TURN_WHITE;
	// [6-7-8] 화면 그림
	drawScreen();
}
// ------------------------------
// [6-8] 돌은 둘 곳을 선택하는 함수
VEC2 inputPosition() {
	// [6-8-1] 돌을 둘수 있는 곳이 선택될때 까지 무한루프
	while (1)
	{
		drawScreen(); // [6-8-2]

	}
}
// ------------------------------
// [6-9] 프로그램 시작
int main()
{
	// [6-9-5] 초기화
	init();
	// [6-9-6] 메인루프
	while (1)
	{
		// [6-9-16] 돌을 둘 곳은 선언
		VEC2 placePosition;
		// [6-9-18] 돌을 둘 곳을 선택하는 함수호출
		placePosition = inputPosition();
	}
}
// ------------------------------
// ------------------------------
// ------------------------------
// ------------------------------
// ------------------------------
// ------------------------------
// ************************************************************
